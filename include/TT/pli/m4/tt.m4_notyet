




dnl This file is `m4/tt.m4pli' : m4 macros to autogenerate various target.pli headers
dnl Tell the user about this.
# This file was automatically generated from `m4/tt.m4pli', do not edit!


#
#  target.pli --  public header for libTT declarations related to "target"
#
#  Copyright (C) 2002 by Massimiliano Ghilardi
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Library General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
#
#

define(`TARGET', `translit(target, `a-z', `A-Z')')

divert(-1)

define(`c_doxygen', `
`#' $@')dnl
define(`c_comment', `
`#' $@')dnl

include(`m4/TTclasses.m4')
divert
divert(-1)
include(`m4/TTclient.m4')
include(`m4/TTfield.m4')
divert

public

# object structure
define(`el', `TTdef_$1($1)
type $1
  field uInt id')
el(target)
undefine(`el')

define(`c_comment')

# global runtime class type; returned by TTCLASSOF <some object>
# class of target
#
# help! how to declare an external C variable?
#
#extern ttclass	TTClass_`'target;

define(`extends',`
`#' the superclass of $2
$1 maybe $2')dnl
define(`field')dnl
define(`el', `TTdef_$1($1)')dnl
el(target)dnl
undefine(`el')dnl
define(`field')dnl
define(`extends')dnl

divert(-1)

define(`pliant_args_name', `ifelse($3, `', `', ` $3`'pliant_args_name(NSHIFT(3,$@))')')
define(`pliant_args_decl', `ifelse($3, `', `', ` pliant_arg_decl($1,$2,$3)`'pliant_args_decl(NSHIFT(3,$@))')')
define(`pliant_arg_decl', `pliant_arg_arg($@) $2 $3;')
dnl define(`pliant_arg_arg', `ifelse(index(`$1', TT_ARG_READ), -1, `ifelse(index(`$1', TT_ARG_WRITE), -1, `arg_rw', `arg_w')', `arg')')
define(`pliant_arg_arg', `arg')

define(`_G', `$@')
define(`_G0', `$@')


define(`m4TTdeclare',`define(`m4TT$1_$2',`TT$1_$2')
function TT$1_$2`'ifelse($3, 0, `', `pliant_args_name(NSHIFT(6, $@))')`'ifelse($5, void, `', ` -> result')
 pliant_args_decl(NSHIFT(6, $@)) ifelse(`$5', void, `', ``arg' $5 result
  external libTT "TT$1_$2"')
')
define(`extends')
define(`public',`m4TTdeclare($@)')
define(`public_set',`public($@)')
define(`final',`public($@)')
define(`final_var',`public($@)')
define(`el', `TTdef_ttclass_$1($1)')

divert

`#' target methods
el(target)

divert(-1)

undefine(`el')
define(`final_var')
define(`final')
define(`public_set')
define(`public')
define(`extends')


define(`def_field', `
`'`#' $2 ``$3'' of target ``o''
`'$1	TT`'decl_name($@)_`'this`'(decl_args($@));
')

divert

define(`el', `

`#' TTGet*_$1 and TTSet*_$1 methods
define(`this', `$1')`'TTdef_$1($1)')
define(`extends')
define(`field', `getset_field($@)')
el(target)
define(`final')
define(`extends')
define(`field')
undefine(`el')



divert(-1)



dnl 
dnl define(`m4TTbasesuper',`ifdef(`m4TT$2_$3',`m4TT$2_$3',`m4TTbasesuper(,`$2',m4_super_$3)')')
dnl 
dnl /* methods inherited by derivate classes */
dnl /* set #defines pointing to the most primitive class implementing the method */
dnl define(`extends')
dnl define(`public',`
dnl `#'define TT$2_$3	m4TTbasesuper(,$2,$3)')
dnl define(`public_set',`public($@)')
dnl define(`final',`public($@)')
dnl define(`mysuper',`ifelse($1,ttobj,`',`mysuper(m4_super_$1,$2)')`'TTdef_ttclass_$1($2)')
dnl define(`el',`
dnl 
dnl /* methods inherited by $1 */dnl
dnl mysuper(m4_super_$1,$1)')
dnl 
dnl TTnlist()
dnl undefine(`el')
dnl undefine(`mysuper')
dnl define(`final')
dnl define(`public_set')
dnl define(`public')
dnl define(`extends')
dnl 

divert

