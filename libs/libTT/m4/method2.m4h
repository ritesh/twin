

dnl This file is `m4/method2.m4' : m4 macros to autogenerate method2_m4.h
dnl Tell the user about this.


/* This file was automatically generated from `m4/method2.m4', do not edit! */
/*
 *
 *  Copyright (C) 2002 by Massimiliano Ghilardi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 */


/*
 *  method2_m4.h  --  implementation of TT*_ttmethod functions,
 *                    TTCall*_ttmethod dispatcher (also used by ttlisteners)
 *
 */

include(`m4/TTclasses.m4')

divert(-1)

include(`m4/TTfield.m4')
include(`m4/TTdecay.m4')

define(`extends')
define(`field')
undefine(`el')

define(`c_arg_call_anonymous', `c_arg_val_decay($2,$3)a[$1]')
define(`_c_args_call_anonymous', `ifelse($4, `', `', `, c_arg_call_anonymous($@)`'_c_args_call_anonymous(incr($1), NSHIFT(4, $@))')')
define(`c_args_call_anonymous', `ifelse($4, `', `', $7, `', `c_arg_call_anonymous($@)', `c_arg_call_anonymous($@)`'_c_args_call_anonymous(incr($1), NSHIFT(4, $@))')')

divert

ttbyte TTCallY_ttmethod(tt_obj id, TT_ARG_WRITE TT_ARG_ARRAY((1)) ttarg * return_value, ttopaque nargs, TT_ARG_READ TT_ARG_ARRAY((_P(2))) ttany *a) {
    ttmethod m;
    ttopaque m_order;
    ttany a0 = (ttany)0;

    if ((m = ID2(ttmethod,id)) && nargs >= m->parameter_type->array_n) switch ((m_order = (opaque)id & TT_MAGIC_MASK)) {
    
	/* generic functions */

define(`handy_method', `
      case ttmethod_$1:
	a0_eq_ifnotvoid($4,$5)`'c_arg_ret_undecay_ifnotvoid($4,$5)`'TT$1(c_args_call_anonymous(0, NSHIFT(6, $@)));
	break;')

TTdef_ttclass_handymethods()

undefine(`handy_method')`'dnl



define(`final', `
      case ttmethod_$1_$2:
	a0_eq_ifnotvoid($4,$5)`'c_arg_ret_undecay_ifnotvoid($4,$5)`'TT$1_$2(c_args_call_anonymous(0, NSHIFT(6, $@)));
	break;')
define(`public', `final($@)')
define(`public_set', `final($@)')
define(`el',`
	/* $1 methods */
    TTdef_ttclass_$1($1)
')
TTlist()
undefine(`el')
define(`final')
define(`public_set')
define(`public')

	/* TTSet*_* methods omitted, they are listed above ! */
    
	/* TTGet*_* methods */

      default:
        if (m_order >= ttmethod_FN_get_first && m_order < ttmethod_FN_get_last) {
	  return TTGetField_ttobj((tt_obj)(opaque)a[1],
				  (tt_obj)(opaque)((order_ttfield<<TT_MAGIC_SHIFT) |
						   (m_order - ttmethod_FN_get_first +
						    ttobj_field_first)),
				  return_value);
	}
	return TT_FALSE;
	
    } else
	return TT_FALSE;
	
    return_value->type = m->return_type;
    return_value->value = a0;
    return TT_TRUE;
}

