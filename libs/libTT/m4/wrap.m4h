

dnl This file is `m4/wrap.m4' : m4 macros to autogenerate wrap_m4.h
dnl Tell the user about this.


/* This file was automatically generated from `m4/wrap.m4', do not edit! */
/*
 *
 *  Copyright (C) 2002 by Massimiliano Ghilardi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 */


/*
 *  wrap_m4.h  --  wrappers around final libTT methods
 *
 */

include(`m4/TTclasses.m4')

divert(-1)

include(`m4/TTdecay.m4')

define(`extends')
define(`public', `ifdef(`m4_super_$8', `
c_arg_type_decay($4,$5) TT$1_$2`'(ifelse($3, 0, void, `c_args_decl_decay(NSHIFT(6, $@))')) {
    $8 a1;
    c_decl_decay_a0_ifnotvoid($4,$5)`'LOCK;
    if ((a1 = ID2($8,$9)))
	a0_eq_ifnotvoid($4,$5)`'tt_obj_obj2id_ifnotvoid_ifdecay($5, `a1->Class->$1`'(a1`'_c_args_call_decay(NSHIFT(9, $@)))');
    UNLK;
    return a0_ifnotvoid($4,$5);
}', `
c_arg_type_decay($4,$5) TT$1_$2`'(ifelse($3, 0, void, `c_args_decl_decay(NSHIFT(6, $@))')) {
    c_decl_decay_a0_ifnotvoid($4,$5)`'LOCK;
    a0_eq_ifnotvoid($4,$5)`'tt_obj_obj2id_ifnotvoid_ifdecay($5, TClass_$2->$1`'(c_args_call_decay(NSHIFT(6, $@))));
    UNLK;
    return a0_ifnotvoid($4,$5);
}')')
define(`final',`ifdef(`m4_super_$8', `
c_arg_type_decay($4,$5) TT$1_$2`'(ifelse($3, 0, void, `c_args_decl_decay(NSHIFT(6, $@))')) {
    $8 a1;
    c_decl_decay_a0_ifnotvoid($4,$5)`'LOCK;
    if ((a1 = ID2($8,$9)))
	a0_eq_ifnotvoid($4,$5)`'tt_obj_obj2id_ifnotvoid_ifdecay($5, `$1_$2`'(a1`'_c_args_call_decay(NSHIFT(9, $@)))');
    UNLK;
    return a0_ifnotvoid($4,$5);
}', `
c_arg_type_decay($4,$5) TT$1_$2`'(ifelse($3, 0, void, `c_args_decl_decay(NSHIFT(6, $@))')) {
    c_decl_decay_a0_ifnotvoid($4,$5)`'LOCK;
    a0_eq_ifnotvoid($4,$5)`'tt_obj_obj2id_ifnotvoid_ifdecay($5, `$1_$2`'(c_args_call_decay(NSHIFT(6, $@)))');
    UNLK;
    return a0_ifnotvoid($4,$5);
}')')
define(`public_set',`final($@)')

dnl do not generate wrappers for `final_alt' methods
define(`final_alt')

divert

/* `public', `public_set' and `final' methods */

define(`el',`
/* $1 methods */
TTdef_ttclass_$1($1)
')
TTlist()
undefine(`el')
define(`final')
define(`public')
define(`public_set')
define(`extends')


