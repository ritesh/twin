

dnl This file is `m4/getset.m4' : m4 macros to autogenerate getset_m4.h
dnl Tell the user about this.


/* This file was automatically generated from `m4/getset.m4', do not edit! */

/*
 *
 *  Copyright (C) 2002 by Massimiliano Ghilardi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 */

/*
 *  getset_m4.h  --  implementation of TTGet*_* methods
 *
 */

include(`m4/TTclasses.m4')

divert(-1)

include(`m4/TTfield.m4')
include(`m4/TTdecay.m4')

divert

/* TTGet*_* methods */


define(`body_fn_get', `this a0;
    if ((a0 = ID2(this, o)))
	return tt_obj_obj2id_ifnotvoid_ifdecay($6, a0->$2);
    return c_arg_ret_decay($1)0;
')

define(`getset_method', `
c_arg_decl_decay($5,$6,)`'TT`'Toupper2($1,$2)_`'this`'(c_args_decl_decay(NSHIFT(7, $@))) {
    body_fn_$1($@)`'dnl
}')



define(`el', `

/* TTGet*_$1 methods */
define(`this', `$1')`'TTdef_$1($1)')
define(`extends')
define(`field', `get_field($@)')
TTlist()
define(`extends')
define(`field')
undefine(`el')

divert(-1)

dnl define(`type_ttclass', `ifelse(regexp(`$1', `_fn$'), -1, TTClass_$1, TTClass_ttfunction_fn)')

define(`getset_super_mtd', `ifdef(`mtd_$1_$2', `$2', `getset_super_mtd($1, m4_super_$2)')')

dnl define(`reverse', `ifelse(`$1', `', `', `regexp(`$1', `\([^ ]+\)\(\( +[^ ]+\)*\)', `reverse(\2) \1')')')

dnl define(`reverseTTlist', reverse(TTlist()))

divert

/* back-end functions for TTGetField_ttobj() */
define(`el', `
`'define(`this', $1)`'dnl
`'define(`extends')`'dnl
`'define(`this_count', 0)`'dnl
`'define(`field', `ifelse(index($'`3, r), -1, `', `define(`this_count', inc(this_count))')')`'dnl
`'TTdef_$1($1,$1)`'dnl
`'ifelse(ifelse(this_count, 0, ifelse($1, ttobj, y, `'), y), `', `', `
`'define(`mtd_GetField_$1')`'dnl
'static ttbyte getset_GetField_$1(TT_ARG_READ $1 o, ttopaque which, ttany *value) {
    if (which && which < this()_field_last && o && TTAssert(IS($1,o))) {
	if (which >= this()_field_first) {
	    switch (which) {
`'define(`getset_method', `ifelse($'`1, get, `
	      case this()_'$'`2`:
		*value = (ttany)opaque_ifaddress('$'`5`,'$'`6`)obj2id_ifnotvoid_ifdecay('$'`6`, o->'$'`2`);
		break;`'dnl
', `')')`'dnl
`'define(`field', `get_field($'`@)')`'dnl
`'TTdef_$1($1,$1)
	      default:
		return TT_FALSE;
	    }
	    return TT_TRUE;
	}
	ifelse($1, ttobj, `', `else
	    return getset_GetField_`'getset_super_mtd(GetField,m4_super_$1)((TT_ARG_READ getset_super_mtd(GetField,m4_super_$1))o, which, value);')
    }
    return TT_FALSE;
})`'dnl
`'define(`field')`'dnl
`'define(`final')`'dnl
`'define(`extends')`'dnl
`'undefine(`this')`'dnl
`'undefine(`this_count')`'dnl
')
TTlist()
undefine(`el')

typedef ttbyte (*get_fn)(TT_ARG_READ ttobj, ttuint, ttany *);

static ttbyte getset_GetField(TT_ARG_READ ttobj o, tt_obj which, ttany *value) {
    static get_fn fn [] = {
	(get_fn)0,
define(`el', `
	(get_fn)getset_GetField_`'getset_super_mtd(GetField,$1),')
TTlist()
undefine(`el')
    };
    ttuint i;
    ttany dummy;
    
    if (!value)
	value = &dummy;

    if (o && (i = o->id >> TT_MAGIC_SHIFT) && i < sizeof(fn)/sizeof(fn[0]) && ID2(ttfield,which))
	return fn[i](o, (ttuint)((ttopaque)which & TT_MAGIC_MASK), value);

    return TT_FALSE;
}

/* back-end functions for TTSetField_ttobj() */
define(`el', `
`'define(`this', $1)`'dnl
`'define(`extends')`'dnl
`'define(`this_count', 0)`'dnl
`'define(`field', `ifelse(index($'`3, w), -1, `', `define(`this_count', inc(this_count))')')`'dnl
`'TTdef_$1($1,$1)`'dnl
`'ifelse(ifelse(this_count, 0, ifelse($1, ttobj, y, `'), y), `', `', `
`'define(`mtd_SetField_$1')`'dnl
'static ttbyte getset_SetField_$1($1 o, ttopaque which, ttany value) {
    if (which && which < this()_field_last && o && TTAssert(IS($1,o))) {
	if (which >= this()_field_first) switch (which) {
`'define(`getset_method', `ifelse($'`1, set, `
	  case this()_'$'`2`:
`'ifelse('$'`11`, `', `', `
`#'error internal error: unsupported attributes' '$'`11` in TTSet`'Toupper('$'`2`)_`'this`'())`'dnl
	    return TTSet`'Toupper('$'`2`)_`'this`'((tt_obj)o->id, c_arg_val_decay('$'`11`, '$'`12`)value);', `')')`'dnl
`'define(`field', `set_field($'`@)')`'dnl
`'TTdef_$1($1,$1)
	  default:
	    return TT_FALSE;
	}
	ifelse($1, ttobj, `', `else
	    return getset_SetField_`'getset_super_mtd(SetField,m4_super_$1)((getset_super_mtd(SetField,m4_super_$1))o, which, value);')
    }
    return TT_FALSE;
})`'dnl
`'define(`field')`'dnl
`'define(`final')`'dnl
`'define(`extends')`'dnl
`'undefine(`this')`'dnl
`'undefine(`this_count')`'dnl
')
TTlist()
undefine(`el')

typedef ttbyte (*set_fn)(TT_ARG_READ ttobj, ttuint, ttany);

static ttbyte getset_SetField(TT_ARG_READ ttobj o, tt_obj which, TT_ARG_READ TT_ARG_ARRAY((1)) ttarg *value) {
    static set_fn fn [] = {
	(set_fn)0,
define(`el', `
	(set_fn)getset_SetField_`'getset_super_mtd(SetField,$1),')
TTlist()
undefine(`el')
    };
    ttuint i;
    
    if (o && (i = o->id >> TT_MAGIC_SHIFT) && i < sizeof(fn)/sizeof(fn[0]) &&
	IS(ttobject,o) && !(((ttobject)o)->oflags & ttobject_oflags_const) && ID2(ttfield,which)) {

	return fn[i](o, (ttuint)((ttopaque)which & TT_MAGIC_MASK), value->value);
    }
    return TT_FALSE;
}



