# Copyright (C) 2000 by Massimiliano Ghilardi
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
#
#
# Top level, common rules
#

#
# do NOT touch this
#
-include $(B)makeautoconf
-include $(T)makeversion

#
# uncomment to enable quiet (fewer messages) compile / link
# QUIET=y


#
# choose your favorite C compiler.
# keep commented to let `./configure' autodetect it
# CC=gcc


#
# uncomment this to turn debugging on
# DEBUG=y

#
# compile/link flags. Used if no CFLAGS/LDFLAGS given in `make' command line
#
CC_NAME:=$(word 1, $(subst -, ,$(CC)))

ifdef DEBUG
 CFLAGS+=$(CC_FLAGS_DEBUG) -DINLINE=static
 LDFLAGS+=-g
else
 ifdef PROFILE
   CFLAGS+=$(CC_FLAGS_PROFILE)
   LDFLAGS+=-p -pg
 else
   ifneq ($(findstring gcc,$(CC_NAME)),)
     CFLAGS+=$(CC_FLAGS_OPT)
     LDFLAGS+=-s
   else
     # detected by `./configure' :
     CFLAGS+=$(CC_AC_FLAGS)
   endif
   # strip installed binaries
   INSTALLFLAGS+=-s
 endif
endif

CFLAGS+=$(CC_FLAGS_BASE)

# how picky should your compiler be? uncomment for paranoid settings.
#
# CFLAGS+=$(CC_FLAGS_PARANOID)

# try to get some extensions if available (recursive pthread mutexes, grantpt(), ...)
CFLAGS+=-D_GNU_SOURCE

#
# set 'install' program
# keep commented to let `./configure' autodetect it
#
#INSTALL-BIN=install

#
# create an install directory
#
INSTALL-DIR=$(INSTALL-BIN) -d

#
# install with 644 permission:
#
INSTALL-TXT=$(INSTALL-BIN) -m 644

#
# set `ar' archiver... (autodetected)
#
#AR=ar
#
# set `ranlib' archiver (autodetected)
#
#RANLIB=ranlib

#
# `cp -f' : `cp' with force overwrite
#
CP=cp -f

#
# `ln -f -s' : `ln' with soft links, force overwrite
#
LN=ln -f -s

#
# `mkdir -p' or `mkdirhier' : make a directory and all missing directory parents
#
MKDIR=mkdir -p
#MKDIR=mkdirhier


#
# choose a variation of `echo' that interprets \n as newline.
# keep commented to enable autodetection.
#
#ECHO_E=echo
#ECHO_E=echo -e

#
# where is bash on your system?
# keep commented to enable autodetection.
#
#BASH=/bin/bash


#
# GNU m4 preprocessor
#
M4=m4


#
# --------------- no user-serviceable parts below this line ----------------
#

# fixup directories

ifeq ($(T),)
  TT:=./
else
  TT:=$(T)
endif

ifeq ($(B),)
  BB:=./
else
  BB:=$(B)
endif

ifeq ($(S),)
  SS:=./
else
  SS:=$(S)
endif

#
# tell the user what we are doing, either verbosely or silently
ifeq ($(QUIET),y)
  echo-and-compile=@echo "compiling $(2)" ; $(1) $(2)
  echo-and-link=@echo "linking   $(2)" ; $(1) $(2)
  echo-done=:
  Q:=@
else
  echo-and-compile=$(strip $(1) $(2))
  echo-and-link=$(strip $(1) $(2))
  echo-done=:
  Q:=
endif




CONF=$(B)conf/conf.current




#
# rules for the various kind of objects:
#

#
# 'make' should NOT try to build these:
#

%.sub     : ;

%.in      : ;

.%.flags  : ;

%.m4 %.m4m %.m4h  : ;


# libtool and autoconf stuff

#
# libtool scripts must already exist in order for './configure'
# to be generated correctly
# and include/autoconf.h.in must already exist in order for './configure'
# to correctly generate include/autoconf.h
#

ifneq ($(MAINTAINER),)

 ADMIN_LIBTOOLS:=$(T)admin/ltmain.sh $(T)admin/config.guess $(T)admin/config.sub

 $(ADMIN_LIBTOOLS):
	cd $(TT) && libtoolize

 ADMIN_ACLOCAL:=$(T)admin/aclocal.m4

 DISTCLEAN_EMPTY_FILES:=$(ADMIN_ACLOCAL) $(ADMIN_LIBTOOLS)

 $(ADMIN_ACLOCAL):
	@if [ -f /usr/share/aclocal/libtool.m4 ]; then \
	  echo $(LN) /usr/share/aclocal/libtool.m4 $@ ; \
	  $(LN) /usr/share/aclocal/libtool.m4 $@ ; \
	else \
	  echo touch $@; \
	  touch $@; \
	fi

 $(T)configure: $(T)configure.in $(ADMIN_LIBTOOLS) $(ADMIN_ACLOCAL) $(T)scripts/Makefiles.sh $(T)include/autoconf.h.in
	rm -f $@ && cd $(TT) && autoconf2.50 -I admin

 $(T)include/autoconf.h.in: $(T)configure.in
	rm -f $@ && cd $(TT) && autoheader2.50

 $(B)config.status: $(T)configure $(ADMIN_LIBTOOLS)
	@echo Updating config.status libtool; \
	$(TT)configure --cache-file=config.cache --no-create

 $(B)libtool: $(B)config.status

endif


$(T)makeversion: $(T)include/version.in $(T)makerules.in
	@echo Updating $@; \
	 echo "TWIN_VERSION_STR=`cut -d= -f2 < $< | xargs echo | tr ' ' '_' | \
	 sed 's%^\([0-9]\+\)_\([0-9]\+\)_\([0-9]\+\)%\1.\2.\3%'`" > $@

#
# avoid running $(B)config.status twice, once for $(B)makeautoconf
# and once for $(B)conf/conf.auto
#
$(B)makeautoconf: $(T)makeautoconf.in $(T)conf/conf.auto.in $(B)config.status
	@echo Updating $(B)makeautoconf $(B)conf/conf.auto; \
	 $(BB)config.status

$(B)conf/conf.auto: $(B)makeautoconf


#
# this is an overkill, as it would force recompiling all sources that
# include "autoconf.h" or "Tw/Twautoconf.h" (almost every one)
# after each time someone runs $(TT)configure
#
# $(B)include/autoconf.h: $(B)config.status $(T)include/autoconf.h.in 
#	rm -f $@ && $(BB)config.status
#
# unluckily it is needed to correctly bootstrap commands like
# 'make -f Makefile.sub autogen' or 'make -f Makefile.sub distclean',
# so the solution is:
# check whether $(B)include/autoconf.h is actually up-to-date
# (config.status does not touch it if its contents do not change),
# else remove it and run either $(BB)config.status or $(TT)configure.
# 
# Instead of having $(B)include/autoconf.h depend on $(B)config.status,
# we manually check whether config.status exists and make it if needed.
#
$(B)include/autoconf.h: $(T)include/autoconf.h.in
	@echo Updating $@; \
	if [ ! -f $(B)config.status ]; then \
	  $(MAKE) -f Makefile.sub $(B)config.status ; \
	fi ; \
	if [ $(B)conf/conf.auto -nt $(B)config.status -a \
	     $(B)conf/conf.auto -nt $< ]; then \
	  touch $@; \
	else \
	  rm -f $@ ; \
	  $(BB)config.status ; \
	fi

bootstrap: $(CONF)




#
# version-related stuff
#

ifeq ($(EXTRA_VER),)
  EXTRA_VER=0
endif

$(S)version.h: $(S)version.h.in $(S)version.in
	$(Q)sed -e 's/@MAJOR_VER@/$(MAJOR_VER)/g' -e 's/@MINOR_VER@/$(MINOR_VER)/g' \
	    -e 's/@PATCH_VER@/$(PATCH_VER)/g' -e 's/@EXTRA_VER@/$(EXTRA_VER)/g' < $< > $@







SHLIBS_VER=$(MAJOR_VER).$(MINOR_VER).$(PATCH_VER)

ifeq ($(SYS_SHLIBS),native)
  # either native shared library support,
  # or no shared libraries at all.
  # in both cases, do not use libtool
  
  
  # compile normal (static) objects (i.e. ones used in $(BINS) $(ARLIBS) $(CLLIBS))
  CC_BIN=$(CC)

  # link normal (static) binaries (may have to link against shared libraries)
  LD_BIN=$(CC)

  # compile shared libraries or modules
  CC_SH=$(CC) -fPIC

  # link shared modules
  LD_MOD=$(CC) -shared

  # link shared libraries
  LD_SH=$(CC) -shared

  make-mod-links=target_mod=$(patsubst %.la,%.so,$(1)) ; \
    $(LN) $$target_mod.$(SHLIBS_VER) $(1)

  make-shlib-links=target_shlib=$(patsubst %.la,%.so,$(1)) ; \
    $(LN) $$target_shlib.$(SHLIBS_VER) $(1) ; \
    $(LN) $$target_shlib.$(SHLIBS_VER) $$target_shlib.$(MAJOR_VER) ; \
    $(LN) $$target_shlib.$(MAJOR_VER) $$target_shlib

  #
  # how to install a binary (program or library)
  #
  INSTALL=$(INSTALL-BIN) $(INSTALL_FLAGS)

else

  # compile normal (static) objects (i.e. ones used in $(BINS) $(ARLIBS) $(CLLIBS))
  CC_BIN=$(CC)

  # link normal (static) binaries (may have to link against shared libraries)
  LD_BIN=$(B)libtool --silent $(CC)

  # compile shared libraries or modules
  CC_SH=$(B)libtool --silent $(CC)

  # install path for shared libraries or modules
  ifeq ($(libdir_SHLIBS_MODS),)
    ifeq ($(libdir),)
      libdir_SHLIBS_MODS=$(shell pwd)
    else
      libdir_SHLIBS_MODS=$(libdir)
    endif
  endif
  ifeq ($(libdir_MODS),)
    libdir_MODS=$(libdir_SHLIBS_MODS)
  endif
  ifeq ($(libdir_SHLIBS),)
    libdir_SHLIBS=$(libdir_SHLIBS_MODS)
  endif

  # link shared modules
  LD_MOD=$(B)libtool --silent $(CC) -module -rpath $(libdir_MODS)

  # link shared libraries
  LD_SH=$(B)libtool --silent $(CC) -rpath $(libdir_SHLIBS)
  
  #
  # convert shared libraries version
  # from major,minor,patch to current:revision:age
  # (on linux: major = current - age, minor = age, patch = revision,
  # and we use this scheme for all platforms; it's just a little math
  # from one scheme to the other)
  # 
  shlibs-version-info=-version-info $(shell expr $(1) + $(2)):$(3):$(2)

  LD_FLAGS_SHLIBS+=$(call shlibs-version-info,$(MAJOR_VER),$(MINOR_VER),$(PATCH_VER))

  #
  # how to install a program or library: wrap with libtool
  #
  INSTALL=$(B)libtool --silent $(INSTALL-BIN) $(INSTALL_FLAGS)

endif
 
# compile from assembler
CC_AS=$(CC)

#
# save user-specified or above default values in the right place
#
CC_FLAGS+=$(CFLAGS) $(EXTRA_CFLAGS)
LD_FLAGS+=$(LDFLAGS) $(EXTRA_LDFLAGS)
INSTALL_FLAGS+=$(INSTALLFLAGS) $(EXTRA_INSTALLFLAGS)


ifeq ($(filter r,$(MAKEFLAGS)),)
  MAKEFLAGS+=r
  $(T)makerules.in: phony-force-remake
else
  makerules.in: ;
endif

ifeq ($(T),$(B))
  CC_FLAGS+=-I$(T)include
else
  CC_FLAGS+=-I$(T)include -I$(B)include
endif
ifneq ($(S),)
  CC_FLAGS+=-I$(SS)
endif


#
# once shared libraries are installed, it's ok to link just with
# one of -lTutf, -lTw or -lTT
#
# but linking against $(B)libs/libTT/libTT.so fails
# if there is no libTw.so in the linker path (as it happens
# if twin is not already installed), so we need to use
# a little magic to handle library dependencies.
#
# when using static libraries, we must always explicitly
# link all of them... (linker knows no dependencies with them)
#

ifeq ($(CONF__SHLIBS),n)
  ifeq ($(CONF__UNICODE),y)
    LD_LIBTUTF:=$(B)libs/libTutf/libTutf.a
  endif
  ifneq ($(CONF__SOCKET),n)
    LD_LIBTW:=$(B)libs/libTw/libTw.a
  
    ifeq ($(CONF_SOCKET_GZ),y)
      LD_LIBTW+=-lz
    endif
    ifeq ($(CONF_SOCKET_PTHREADS),y)
      LD_LIBTW+=$(LD_LIBPTHREAD_WEAK)
    endif
  endif
  ifeq ($(CONF_TT),y)
    LD_LIBTT:=$(B)libs/libTT/libTT.a
    
    ifeq ($(CONF__MODULES),y)
      LD_LIBTT+=$(LD_LIBDL)
      ifeq ($(SYS_SHLIBS),native)
        LD_LIBTT+=-rdynamic
      else
        LD_LIBTT+=-export-dynamic
      endif
    endif
    ifeq ($(CONF__UNICODE),y)
      LD_LIBTT+=$(LD_LIBTUTF)
    endif
    ifeq ($(CONF_SOCKET_PTHREADS),y)
      LD_LIBTT+=$(LD_LIBPTHREAD_WEAK)
    endif
    ifeq ($(CONF_TT_HW_TWIN),y)
      LD_LIBTT+=$(LD_LIBTW)
    endif
    ifeq ($(CONF_TT_HW_GTK),y)
      LD_LIBTT+=$(LD_LIBGTK)
    endif
  endif
else
  ifeq ($(SYS_SHLIBS),native)
    #
    # this is for GNU gcc with GNU ld on Linux/FreeBSD:
    # a shared library can depend on another shared library,
    # and if the former is linked against the latter,
    # you just need to specify the first one when linking a program,
    # provided GNU ld can find also the second one in its search path
    #
    ifeq ($(CONF__UNICODE),y)
      LD_LIBTUTF:=-L$(B)libs/libTutf -lTutf
    endif
    ifneq ($(CONF__SOCKET),n)
      LD_LIBTW:=-L$(B)libs/libTw -lTw
    endif
    ifeq ($(CONF_TT),y)
      LD_LIBTT:=-L$(B)libs/libTT -lTT
      
      ifeq ($(CONF__UNICODE),y)
        LD_LIBTT+=-Wl,-rpath-link,$(B)libs/libTutf
      endif
      ifeq ($(CONF_TT_HW_TWIN),y)
        LD_LIBTT+=-Wl,-rpath-link,$(B)libs/libTw
      endif
    endif
  else
    #
    # this is for libtool >= 1.4.1, that allows
    # a libtool library to depend on another libtool library
    # (libTT is linked against, and needs, libTutf)
    #
    ifeq ($(CONF__UNICODE),y)
      LD_LIBTUTF:=$(B)libs/libTutf/libTutf.la
    endif
    ifneq ($(CONF__SOCKET),n)
      LD_LIBTW:=$(B)libs/libTw/libTw.la
    endif
    ifeq ($(CONF_TT),y)
      LD_LIBTT:=$(B)libs/libTT/libTT.la
    endif
  endif
endif  

config:
	@echo Starting configure for twin $(TWIN_VERSION_STR)	... ; \
	echo
	$(BASH) $(T)scripts/Configure.tty "$(T)" "$(B)"

menuconf menuconfig:
	@echo Starting menu-dialog configure for twin $(TWIN_VERSION_STR)	... ; \
	echo
	$(BASH) $(T)scripts/Configure.dialog "$(T)" "$(B)"

gconf gconfig:
	@echo Starting menu-gdialog configure for twin $(TWIN_VERSION_STR)	... ; \
	echo
	$(BASH) $(T)scripts/Configure.dialog "$(T)" "$(B)" 254 gdialog

nullconfig:
	$(BASH) $(T)scripts/Configure.tty "$(T)" "$(B)" < /dev/null > /dev/null





# collect together in $(OBJS) all objs from $(BINS) looking in $(OBJS_xxx)
_BIN_OBJS:=$(foreach X,$(BINS),$(OBJS_$(X)))

# same with $(_MOD_OBJS) from $(MODS)
_MOD_OBJS:=$(foreach X,$(MODS),$(OBJS_$(X)))

# same with $(_SHLIB_OBJS) from $(SHLIBS)
_SHLIB_OBJS:=$(foreach X,$(SHLIBS),$(OBJS_$(X)))

# same with $(_ARLIB_OBJS) from $(ARLIBS)
_ARLIB_OBJS:=$(foreach X,$(ARLIBS),$(OBJS_$(X)))

# same with $(_CLLIB_OBJS) from $(CLLIBS)
_CLLIB_OBJS:=$(foreach X,$(CLLIBS),$(OBJS_$(X)))


_ALL_BINS:=$(sort $(BINS) $(MODS) $(SHLIBS) $(ARLIBS) $(CLLIBS))

_ALL_OBJS:=$(sort $(_BIN_OBJS) $(_MOD_OBJS) $(_SHLIB_OBJS) $(_ARLIB_OBJS) $(_CLLIB_OBJS) $(ALL_OBJS))

#
# try to autodetect whether a %.o object comes from
# %.c, %.S or %.C source:
# if a %.S or %.C file exists, take it, else assume %.c
#
# we must take care since we have %.o and %.lo objects
# and they all come from the same %.c, %.S or %.C source
#
__ALLOBJS_RAW:=$(sort $(foreach E, o lo, $(patsubst %.$(E),%.o,$(filter %.$(E),$(_ALL_OBJS)))))
__ALLSRCS_ASM:=$(strip $(wildcard $(patsubst %.o,$(S)%.S,$(__ALLOBJS_RAW))))
__ALLSRCS_CXX:=$(strip $(wildcard $(patsubst %.o,$(S)%.C,$(__ALLOBJS_RAW))))
__ALLOBJS_ASM:=$(patsubst $(S)%.S,%.o,$(__ALLSRCS_ASM))
__ALLOBJS_CXX:=$(patsubst $(S)%.C,%.o,$(__ALLSRCS_CXX))

_ALL_SRCS:=$(patsubst %.o,$(S)%.c,$(filter-out $(__ALLOBJS_ASM) $(__ALLOBJS_CXX), $(__ALLOBJS_RAW))) \
           $(__ALLSRCS_ASM) $(__ALLSRCS_CXX)


.SECONDARY: $(_ALL_SRCS) $(_ALL_OBJS) Makefile $(wildcard make*)

$(CONF): $(B)conf/conf.auto $(B)include/Tw/Twautoconf.h
	$(BASH) $(T)scripts/Configure.tty "$T" "$B" < /dev/null > /dev/null || \
	/bin/sh $(T)scripts/Configure.fallback "$T" "$B" < /dev/null > /dev/null


.modules: Makefile $(S)Makefile.sub $(T)makerules.in $(T)makeversion $(B)makeautoconf $(CONF)
	@echo "building  .modules" ; \
	 $(ECHO_E) " $(foreach X,$(BINS),$(X): .$(X).bin\n .$(X).bin: $(OBJS_$(X))\n)" > $@ ; \
	 $(ECHO_E) " $(foreach X,$(MODS),$(X): .$(X).mod\n .$(X).mod: $(OBJS_$(X))\n)" >> $@ ; \
	 $(ECHO_E) " $(foreach X,$(SHLIBS),$(X): .$(X).shlib\n .$(X).shlib: $(OBJS_$(X))\n)" >> $@ ; \
	 $(ECHO_E) " $(foreach X,$(ARLIBS),$(X): .$(X).arlib\n .$(X).arlib: $(OBJS_$(X))\n)" >> $@ ; \
	 $(ECHO_E) " $(foreach X,$(CLLIBS),$(X): .$(X).cllib\n .$(X).cllib: $(OBJS_$(X))\n)" >> $@ ; \
	 $(ECHO_E) " ifeq (\$$(SYS_SHLIBS),native)" >> $@ ; \
	 $(ECHO_E) " $(foreach X,$(SHLIBS),  LD_FLAGS_$(X)+=-Wl,-soname,$(patsubst %.la,%,$(X)).so.$(MAJOR_VER)\n)" >> $@ ; \
	 $(ECHO_E) " endif" >> $@



#
# dependencies for autogenerated makefiles
#

make_list_fragments.m4m:=$(shell find $(TT) -name makefragment.m4m)

make_list_fragments_m4:=$(patsubst $(T)%/m4/makefragment.m4m,$(T)%/makefragment_m4,$(make_list_fragments.m4m))

-include $(make_list_fragments_m4) $(shell find $(TT) -name makefragment)

$(T)%/makefragment_m4: $(T)%/m4/makefragment.m4m
	$(M4) -I$(T)include $< > $@



#
# includes can be autogenerated from m4 macro scripts...
# these are a nightmare to catch and put in .depend:
# we transform m4/%.m4h file names into %_m4.h and manually
# add them to .depend dependencies.
# 
#
FILES_M4_PLI=$(strip $(sort $(patsubst $(1)m4/%.m4pli,$(1)%_m4.pli,$(wildcard $(1)m4/*.m4pli))))

FILES_M4_H=$(strip $(sort $(patsubst $(1)m4/%.m4h,$(1)%_m4.h,$(wildcard $(1)m4/*.m4h))))

FILES_H=$(strip $(sort $(filter-out $(call FILES_M4_H,$(1)),$(wildcard $(1)*.h))))

map = $(foreach a,$(wildcard $(2)),$(call $(1),$(a)))

_FILES_M4_H:=$(call FILES_M4_H,$(S))
_FILES_H:=$(call FILES_H,$(S))


#
# cheat a little with what gets printed...
#
.depend: $(B)scripts/Mkdep Makefile $(S)Makefile.sub $(T)makerules.in $(CONF) $(_ALL_SRCS) $(_FILES_H) $(_FILES_M4_H)
	@echo "building  $@" ; \
	 $< \
	   -R1"$(S)":'$$(S)' \
	   -R2"$(T)":'$$(T)' \
	   $(filter -I%,$(CC_FLAGS)) $(sort $(_ALL_SRCS)) \
	   -C $(call FILES_M4_H,) \
	   +T $(call FILES_H,) | \
	 sed 's%\$$(S)\([^/ ]*\.\(o\|lo\)\)%\1%g' > $@


_T_DIRS_H:=$(T)include/ $(T)include/T*/
_T_FILES_H:=$(call map,FILES_H,$(_T_DIRS_H))
_T_FILES_M4_H:=$(call map,FILES_M4_H,$(_T_DIRS_H))

T_CANONICAL:=$(shell cd $(TT); /bin/pwd)
B_CANONICAL:=$(shell cd $(BB); /bin/pwd)

ifneq ($(T_CANONICAL),$(B_CANONICAL))
 _B_DIRS_H:=$(B)include/ $(B)include/T*/
 _B_FILES_H:=$(call map,FILES_H,$(_B_DIRS_H))
 _B_FILES_M4_H:=$(call map,FILES_M4_H,$(_B_DIRS_H))
endif

$(B).hdepend: $(B)scripts/Mkdep $(T)makerules.in $(_T_FILES_H) $(_T_FILES_M4_H) $(_B_FILES_H) $(_B_FILES_M4_H)
	@echo "building  $(B).hdepend" ; \
	 $< \
	   -R1"$(T)":'$$(T)' -R2"$(B)":'$$(B)' \
	   -I$(T)include -I$(B)include \
	   -C $(_T_FILES_M4_H) $(_B_FILES_M4_H) \
	   +T $(_T_FILES_H)    $(_B_FILES_H)    > $@




$(S)%_m4.h: $(S)m4/%.m4h $(wildcard $(T)include/m4/*.m4)
	$(M4) -I$(T)include $< > $@

$(S)%_m4.pli: $(S)m4/%.m4pli $(wildcard $(T)include/m4/*.m4)
	$(M4) -I$(T)include $< > $@




#
# normal (unshared) objects (from $(BINS) $(ARLIBS) $(CLLIBS))
#
%.o: $(S)%.c
	$(call echo-and-compile,$(CC_BIN) $(sort $(CC_FLAGS) $(CC_FLAGS_$@)) -c $< -o,$@)
	@$(ECHO_E) ' ifeq ($$(CC_BIN) $$(sort $$(CC_FLAGS) $$(CC_FLAGS_$@)),$(CC_BIN) $(sort $(CC_FLAGS) $(CC_FLAGS_$@)))\n'\
	'  FILES_UP_TO_DATE += $@\n'\
	'endif' > .$@.flags && \
	 $(echo-done)

#
# shared objects (from $(MODS) $(SHLIBS))
# WARNING: we use both CC_FLAGS_%.o and CC_FLAGS_%.lo 
#
# hack note: libtool adds a %.o -> %.lo symlink if the %.o object
# does not already exist. we remove that link since it confuses make:
# make skips properly compiling %.o even if needed due to the symlink.
#
%.lo: $(S)%.c
	$(call echo-and-compile,$(CC_SH) $(sort $(CC_FLAGS) $(CC_FLAGS.lo) $(CC_FLAGS_$*.o) $(CC_FLAGS_$@)) -c $< -o,$@)
	@if [ ! -f $*.o ]; then \
	  rm -f $*.o ; \
	 fi ; \
	 $(ECHO_E) ' ifeq ($$(CC_SH) $$(sort $$(CC_FLAGS) $$(CC_FLAGS.lo) $$(CC_FLAGS_$*.o) $$(CC_FLAGS_$@)),$(CC_SH) $(sort $(CC_FLAGS) $(CC_FLAGS.lo) $(CC_FLAGS_$*.o) $(CC_FLAGS_$@)))\n'\
	'  FILES_UP_TO_DATE += $@\n'\
	'endif' > .$@.flags && \
	 $(echo-done)

#
# assembler objects (if they are PIC or not depends on their contents...
# we add -DPIC while compiling %.lo as a hook to allow for #ifdef PIC conditionals in the source)
#
%.o: $(S)%.S
	$(call echo-and-compile,$(CC_AS) $(sort $(CC_FLAGS) $(CC_FLAGS_$@)) -c $< -o,$@)
	@$(ECHO_E) ' ifeq ($$(CC_AS) $$(sort $$(CC_FLAGS) $$(CC_FLAGS_$@)),$(CC_AS) $(sort $(CC_FLAGS) $(CC_FLAGS_$@)))\n'\
	'  FILES_UP_TO_DATE += $@\n'\
	'endif' > .$@.flags && \
	 $(echo-done)

%.lo: $(S)%.S
	$(call echo-and-compile,$(CC_AS) $(sort $(CC_FLAGS) $(CC_FLAGS.lo) $(CC_FLAGS_$*.o) $(CC_FLAGS_$@) -DPIC) -c $< -o,$@)
	@if [ ! -f $*.o ]; then \
	  rm -f $*.o ; \
	 fi ; \
	 $(ECHO_E) ' ifeq ($$(CC_AS) $$(sort $$(CC_FLAGS) $$(CC_FLAGS.lo) $$(CC_FLAGS_$*.o) $$(CC_FLAGS_$@) -DPIC),$(CC_AS) $(sort $(CC_FLAGS) $(CC_FLAGS.lo) $(CC_FLAGS_$*.o) $(CC_FLAGS_$@) -DPIC))\n'\
	'  FILES_UP_TO_DATE += $@\n'\
	'endif' > .$@.flags && \
	 $(echo-done)

#
# C++ objects (unused)
# 
%.o: $(S)%.C
	$(call echo-and-compile,$(CXX) $(sort $(CC_FLAGS) $(CXX_FLAGS) $(CC_FLAGS_$@) $(CXX_FLAGS_$@)) -c $< -o,$@)
	@$(ECHO_E) ' ifeq ($(CXX) $$(sort $(CC_FLAGS) $(CXX_FLAGS) $(CC_FLAGS_$@) $(CXX_FLAGS_$@)),$(CXX) $(sort $(CC_FLAGS) $(CXX_FLAGS) $(CC_FLAGS_$@) $(CXX_FLAGS_$@)))\n'\
	'  FILES_UP_TO_DATE += $@\n'\
	'endif' > .$@.flags && \
	$(echo-done)


#
# function to extract actual .o files from .lst collection:
# special care must be taken when extracting from .lst NOT in the currect directory
#
expand-lst=$(strip $(filter-out %.lst,$(1)) $(foreach L,$(filter %.lst,$(1)),$(call cat-lst,$(L))))
cat-lst=$(foreach F,$(shell cat $(1)),$(patsubst %,$(dir $(1))%,$(F)))

#
# this is the rule to link a binary. It should look like:
# % : $(OBJS_%)
#	$(CC) -o $* $(OBJS_$*) $(LD_FLAGS) $(LD_FLAGS_$*)
#	...
# but 1) nasty match-all rules like this are a real pain
# and 2) $(OBJS_%) doesn't expand
# so we put into .modules an explicited version of what follows:
# % : .%.bin
# .%.bin : $(OBJS_%)
#
# and we use patterns for the last step:
#       
.%.bin: $(T)makerules.in
	$(call echo-and-link,$(LD_BIN) $(call expand-lst,$(OBJS_$*)) $(LD_FLAGS) $(LD_FLAGS_$*) -o,$*)
	@$(LN) $* $@ && \
	 $(ECHO_E) ' ifeq ($$(strip $$(LD_BIN) $$(OBJS_$*) $$(LD_FLAGS) $$(LD_FLAGS_$*)),$(strip $(LD_BIN) $(OBJS_$*) $(LD_FLAGS) $(LD_FLAGS_$*)))\n'\
	 '  FILES_UP_TO_DATE += $@\n'\
	 'endif' > .$*.flags && \
	 $(echo-done)

.%.mod: $(T)makerules.in
ifeq ($(SYS_SHLIBS),native)
	$(call echo-and-link,$(LD_MOD) $(call expand-lst,$(OBJS_$*)) $(LD_FLAGS) $(LD_FLAGS_SHLIBS) $(LD_FLAGS_$*) -o,$(patsubst %.la,%.so.$(SHLIBS_VER),$*))
	@$(call make-mod-links,$*)
else
	$(call echo-and-link,$(LD_MOD) $(call expand-lst,$(OBJS_$*)) $(LD_FLAGS) $(LD_FLAGS_SHLIBS) $(LD_FLAGS_$*) -o,$*)
endif
	@$(LN) $* $@ && \
	 $(ECHO_E) ' ifeq ($$(strip $$(LD_MOD) $$(OBJS_$*) $$(LD_FLAGS) $$(LD_FLAGS_SHLIBS) $$(LD_FLAGS_$*)),$(strip $(LD_MOD) $(OBJS_$*) $(LD_FLAGS) $(LD_FLAGS_SHLIBS) $(LD_FLAGS_$*)))\n'\
	 '  FILES_UP_TO_DATE += $@\n'\
	 'endif' > .$*.flags && \
	 $(echo-done)

.%.shlib: $(T)makerules.in
ifeq ($(SYS_SHLIBS),native)
	$(call echo-and-link,$(LD_SH) $(call expand-lst,$(OBJS_$*)) $(LD_FLAGS) $(LD_FLAGS_SHLIBS) $(LD_FLAGS_$*) -o,$(patsubst %.la,%.so.$(SHLIBS_VER),$*))
	@$(call make-shlib-links,$*)
else
	$(call echo-and-link,$(LD_SH) $(call expand-lst,$(OBJS_$*)) $(LD_FLAGS) $(LD_FLAGS_SHLIBS) $(LD_FLAGS_$*) -o,$*)
endif
	@$(LN) $* $@ && \
	 $(ECHO_E) ' ifeq ($$(strip $$(LD_SH) $$(OBJS_$*) $$(LD_FLAGS) $$(LD_FLAGS_SHLIBS) $$(LD_FLAGS_$*)),$(strip $(LD_SH) $(OBJS_$*) $(LD_FLAGS) $(LD_FLAGS_SHLIBS) $(LD_FLAGS_$*)))\n'\
	 '  FILES_UP_TO_DATE += $@\n'\
	 'endif' > .$*.flags && \
	 $(echo-done)

.%.arlib: $(T)makerules.in
	$(call echo-and-link,rm -f $* && $(AR) cr $* $(call expand-lst,$(OBJS_$*)) && $(RANLIB),$*)
	@$(LN) $* $@ && \
	 $(ECHO_E) ' ifeq ($$(strip $$(OBJS_$*)),$(strip $(OBJS_$*)))\n'\
	 '  FILES_UP_TO_DATE += $@\n'\
	 'endif' > .$*.flags && \
	 $(echo-done)

.%.cllib: $(T)makerules.in
	$(call echo-and-link,echo $(call expand-lst,$(OBJS_$*)) >,$*)
	@$(LN) $* $@ && \
	 $(ECHO_E) ' ifeq ($$(strip $$(OBJS_$*)),$(strip $(OBJS_$*)))\n'\
	 '  FILES_UP_TO_DATE += $@\n'\
	 'endif' > .$*.flags && \
	 $(echo-done)


ifeq ($(SYS_SHLIBS),native)
  %.so.$(SHLIBS_VER): %.la  ;
else
  #
  # useful (used for dlopen()) links, needed if using libtool
  #
  %.so.$(SHLIBS_VER): %.la
	@if [ -f .libs/$@ ]; then \
	  echo $(LN) .libs/$@ $@ ; \
	  $(LN) .libs/$@ $@ ; \
	else \
	  dst=`grep library_names $*.la | cut -d" " -f1 | cut -d"'" -f2` ; \
	  echo $(LN) .libs/$$dst $@ ; \
	  $(LN) .libs/$$dst $@ ; \
	fi
endif

#
# install and also add
# useful (used for dlopen()) links
#

install-lib-%.a:
	$(INSTALL-TXT) $*.a $(DESTDIR)$(libdir)

uninstall-lib-%.a:
	rm -f $(DESTDIR)$(libdir)/$*.a


ifeq ($(SYS_SHLIBS),native)
  install-mod-%.la:
	$(INSTALL) $*.so.$(SHLIBS_VER) $(DESTDIR)$(libdir)$(INSTALLSUBDIR)
  install-lib-%.la:
	$(INSTALL) $*.so.$(SHLIBS_VER) $(DESTDIR)$(libdir)
	$(LN)      $*.so.$(SHLIBS_VER) $(DESTDIR)$(libdir)/$*.so.$(MAJOR_VER) && \
	$(LN)      $*.so.$(MAJOR_VER)  $(DESTDIR)$(libdir)/$*.so

  uninstall-mod-%.la:
	rm -f $(DESTDIR)$(libdir)$(INSTALLSUBDIR)/$*.so.$(SHLIBS_VER)
  uninstall-lib-%.la:
	rm -f $(DESTDIR)$(libdir)/$*.so.$(SHLIBS_VER) \
	      $(DESTDIR)$(libdir)/$*.so.$(MAJOR_VER) \
	      $(DESTDIR)$(libdir)/$*.so
else
  install-mod-%.la:
	$(INSTALL) $*.la $(DESTDIR)$(libdir)$(INSTALLSUBDIR)
	@echo '(cd $(DESTDIR)$(libdir)$(INSTALLSUBDIR)' ; \
	cd $(DESTDIR)$(libdir)$(INSTALLSUBDIR) ; \
	dst="$*.so.$(SHLIBS_VER)" ; \
	if [ "$(LD_LIBDL)" = "-ldl" ]; then \
	  if [ -f "$$dst" ]; then \
	    echo rm -f $*.la $*.so $*.so.? $*.so.?.? ; \
	    rm -f $*.la $*.so $*.so.? $*.so.?.? ; \
	  else \
	    src="`grep library_names $*.la | cut -d' ' -f1 | cut -d\' -f2`" ; \
	    if [ -f "$$src" ]; then \
	      echo $(LN) "$$dst" "$$src"; \
	      $(LN) "$$dst" "$$src"; \
	    fi ; \
	    echo rm -f "$*.la" ; \
	    rm -f "$*.la" ; \
	  fi ; \
	fi ; \
	echo ')'
  install-lib-%.la:
	$(INSTALL) $*.la $(DESTDIR)$(libdir)

  uninstall-mod-%.la:
	rm -f $(DESTDIR)$(libdir)$(INSTALLSUBDIR)/$*.la
  uninstall-lib-%.la:
	rm -f $(DESTDIR)$(libdir)/$*.la
endif

# forbid GNU-make to `rm -f $(OBJS) $(SHLIBOBJS) $(ARLIBOBJS)' after build
# .SECONDARY: $(OBJS) $(SHLIBOBJS) $(ARLIBOBJS)


#
# random dependencies:
#
$(T)include/Tw/Twtypes.h: $(B)include/Tw/uni_types.h

$(B).hdepend: $(B)include/Tw/uni_types.h

$(B)include/Tw/endianity.h: $(B)scripts/Endianity
	$< > $@

$(B)include/Tw/datasizes.h: $(B)scripts/Getsizes
	$< > $@


force-remake:
	@:

ifeq ($(CONF__LONG_LONG),)
  ifneq ($(wildcard $(CONF)),)
    include $(CONF)
  endif
endif

ifneq ($(wildcard $(B).long_long.conf),)
  include $(B).long_long.conf
else
  PREVIOUS_CONF__LONG_LONG=x
endif

#
# force re-compiling and re-running scripts/Getsizes after CONF__LONG_LONG changed
#
ifneq ($(CONF__LONG_LONG),$(PREVIOUS_CONF__LONG_LONG))
  $(B)scripts/Getsizes: force-remake
endif




ifeq ($(CONF__UNICODE),)
  ifneq ($(wildcard $(CONF)),)
    include $(CONF)
  endif
endif

ifneq ($(wildcard $(B).unicode.conf),)
  include $(B).unicode.conf
else
  PREVIOUS_CONF__UNICODE=x
endif



#
# force re-making after building include/Tw/uni_types.h,
# so that 'make' reads new .unicode.conf
#
ifneq ($(CONF__UNICODE),$(PREVIOUS_CONF__UNICODE))
  $(B)include/Tw/uni_types.h: force-remake
endif

#
# this is a NO NO
#
# $(B)include/Tw/uni_types.h: $(CONF)
#

ifeq ($(CONF__UNICODE),n)
  $(B)include/Tw/uni_types.h $(B).unicode.conf: $(T)scripts/unitypes16.in
	cat $< > $@
	@echo "PREVIOUS_CONF__UNICODE=$(CONF__UNICODE)" > $(B).unicode.conf
else
  $(B)include/Tw/uni_types.h $(B).unicode.conf: $(T)scripts/unitypes32.in
	cat $< > $@
	@echo "PREVIOUS_CONF__UNICODE=$(CONF__UNICODE)" > $(B).unicode.conf
endif


#
# do not have Tw/Twautoconf.h depend on makerules.in ...
# (it actually should, but it's an overkill)
# 
$(B)include/Tw/Twautoconf.h: $(B)include/autoconf.h
	@echo "building  $@" ; \
	 echo "#ifndef _TW_AUTOCONF_H" > $@ && \
	 echo "#define _TW_AUTOCONF_H" >> $@ && \
	 echo >> $@ && \
	 sed -e 's/HAVE_/TW_HAVE_/g' -e 's/RETSIGTYPE/TW_RETSIGTYPE/g' \
	  -e 's/STDC_HEADERS/TW_STDC_HEADERS/g' -e 's/SETVBUF/TW_SETVBUF/g' \
	  -e 's/TIME_WITH_SYS_TIME/TW_TIME_WITH_SYS_TIME/g' \
	  -e 's/TM_IN_SYS_TIME/TW_TM_IN_SYS_TIME/g' < $< | grep TW_ >> $@ && \
	 echo >> $@ && \
	 echo "#endif /* _TW_AUTOCONF_H */" >> $@


ifeq ($(CONF__LONG_LONG),y)
  CC_FLAGS_script_getsizes.o+=-DCONF__LONG_LONG
endif

$(B)scripts/Getsizes $(B).long_long.conf: $(T)scripts/getsizes.c $(T)include/Tw/datatypes.h $(B)include/autoconf.h
	$(CC) $(CC_FLAGS) $(CC_FLAGS_script_getsizes.o) $(LD_FLAGS) $< -o $(B)scripts/Getsizes
	@echo "PREVIOUS_CONF__LONG_LONG=$(CONF__LONG_LONG)" > $(B).long_long.conf

$(B)scripts/Endianity: $(T)scripts/endianity.c $(B)include/autoconf.h
	$(CC) $(CC_FLAGS) $(LD_FLAGS) $< -o $@

#
# Mkdep does not actually depend on datasizes.h,
# but this is the best place to force creating it
#
$(B)scripts/Mkdep: $(T)scripts/mkdep.c $(B)include/autoconf.h $(B)include/Tw/endianity.h $(B)include/Tw/datasizes.h
	$(CC) $(CC_FLAGS) $(LD_FLAGS) $< -o $@

$(B)scripts/Bitmap: $(T)scripts/bitmap.c
	$(CC) $(CC_FLAGS) $(LD_FLAGS) $< -o $@
	

#
# target to recursively build all subdirectories
#
build-subdirs: $(patsubst %, build-dir-%, $(SUBDIRS))

build-dir-%:
	$(MAKE) -C $*

#
# torture is the target to compile all source files in the current directory
# under all possible configurations. VERY useful to spot bugs.
#
# Torture is just like torture, except it also recursively Tortures
# all subdirectories.
#
# They need a lot of autogenerated files, but currently have do explicit
# dependencies for them, so you should run 'make' before invoking one of these.
#

torture-%.c: $(S)%.c Makefile.sub $(T)scripts/Torture $(B)scripts/Bitmap
	@echo; echo "Torturing $<"; echo; \
	$(BASH) $(T)scripts/Torture $(B)scripts/Bitmap $(CC) $(filter-out -DCONF_%, $(CC_FLAGS) $(CC_FLAGS_$*.o)) -c $< -o $*.o -- $<

torture: $(filter %.c, $(_ALL_SRCS) $(foreach S,$(_ALL_SRCS),torture-$(S)))
	
Torture: torture $(patsubst %, Torture-dir-%, $(SUBDIRS))

Torture-dir-%:
	$(MAKE) Torture -C $*

$(T)scripts/Torture: ;


#
# full-autogen is the target to build all autogenerated files that require
# extra tools (m4, bison, flex ...) and thus must be already present
# when releasing twin, to let people build with just compiler and GNU make.
# In order to run './configure', also sed and grep are required.
# 'make config', 'make menuconfig', 'make gconfig' and 'make Torture'
# require GNU bash too.
#
autogen post-autogen: do-autogen

do-autogen: pre-autogen $(patsubst %,autogen-dir-%,$(SUBDIRS)) $(_FILES_M4_H)

autogen-dir-%:
	$(MAKE) autogen -C $*

pre-autogen:


install: $(patsubst %, install-dir-%, $(SUBDIRS))

install-dir-%:
	$(MAKE) install -C $* DESTDIR=$(DESTDIR)


uninstall: $(patsubst %, uninstall-dir-%, $(SUBDIRS))

uninstall-dir-%:
	$(MAKE) uninstall -C $* DESTDIR=$(DESTDIR)


clean: $(patsubst %, clean-dir-%, $(SUBDIRS))

clean-dir-%:
	$(MAKE) clean -C $*






#
# Find files whose flags have changed and force recompilation.
# For safety, this works in the converse direction:
# every file is forced, except those whose flags are positively up-to-date.
#
FILES := $(_BIN_OBJS) $(_MOD_OBJS) $(_SHLIB_OBJS) $(_ARLIB_OBJS) $(_CLLIB_OBJS) \
	 $(patsubst %,.%.bin,$(BINS)) \
	 $(patsubst %,.%.mod,$(MODS)) \
	 $(patsubst %,.%.shlib,$(SHLIBS)) \
	 $(patsubst %,.%.arlib,$(ARLIBS)) \
	 $(patsubst %,.%.cllib,$(CLLIBS)) \

#
# to avoid useless re-making, assume files in other dirs are already up-to-date:
# `make' must already visit all directories anyway.
#
FILES_UP_TO_DATE := $(filter-out $(wildcard * .*), $(FILES))


FILES_FLAGS_EXIST := $(wildcard .*.flags)
ifneq ($(FILES_FLAGS_EXIST),)
 #
 # this appends files whose flags are positively up-to-date to FILES_UP_TO_DATE
 #
 include $(FILES_FLAGS_EXIST)
endif

FILES_CHANGED := $(strip $(filter-out $(FILES_UP_TO_DATE), $(FILES)))

#
# force remaking by using a phony target as prerequisite
#
phony-force-remake:
	@:

ifneq ($(FILES_CHANGED),)

$(FILES_CHANGED): phony-force-remake

endif

