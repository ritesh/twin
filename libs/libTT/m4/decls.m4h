



dnl This file is `m4/decls.m4' : m4 macros to autogenerate decls_m4.h
dnl Tell the user about this.
/* This file was automatically generated from `m4/decls.m4', do not edit! */

/*
 *
 *  Copyright (C) 2002 by Massimiliano Ghilardi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 * 
 */

/*
 *  decls_m4.h  --  INTERNAL (!!) header for libTT types declarations
 *
 *  Note: you cannot include both this file and <TT/decls_m4.h>, as they conflict!
 */

#ifndef _TT_DECLSM4_H
#define _TT_DECLSM4_H

include(`m4/TTclasses.m4')

/* many useful macros */

#define TT_OFFSETOF(type,field)	((size_t)&((type)0)->field)

dnl /* #defines for objects hierarchy */
dnl define(`extends',`
dnl `#'define super_$2	$1')
dnl define(`field')
dnl define(`el',`TTdef_$1($1)')
dnl TTlist()
dnl undefine(`el')
dnl define(`field')
dnl define(`extends')



/* forward declarations for objects structures */
define(`el',`
typedef struct s_$1 *	$1;')
TTlist()
undefine(`el')


/* forward declarations for methods structures */
define(`el',`
typedef struct s_ttclass_$1 *	ttclass_$1;')
TTlist()
undefine(`el')


define(`addspace_ifnotempty', `ifelse($1, `', `', `$1 ')')
define(`c_arg_decl', `addspace_ifnotempty($1)`'$2 $3')
define(`c_args_decl', `ifelse($3, `', `', $6, `', `c_arg_decl($@)', `c_arg_decl($@), c_args_decl(NSHIFT(3,$@))')')

/* declarations for objects structures */
define(`extends',`TTdef_$1($2)`'dnl
    /* `extends' $1 */
')
define(`field',`c_arg_decl($@);
')
define(`el',`
typedef struct s_$1 {
`'TTdef_$1($1)} s_$1;
')
TTlist()
undefine(`el')
define(`field')
define(`extends')


/* declarations for methods structures */
define(`extends',`TTdef_ttclass_$1($2)
    /* `extends' ttclass_$1 */
')
define(`protected',`c_arg_decl($4,$5,`	$6')`'ifelse($3, -1, `', ` (*$1)	(ifelse($3, 0, void, `c_args_decl(NSHIFT(6,$@))'))');
')
define(`public',`protected($@)')
define(`public_set',`protected($@)')
define(`el',`
typedef struct s_ttclass_$1 {
`'TTdef_ttclass_$1($1)
} s_ttclass_$1;
')
TTlist()
undefine(`el')
define(`public')
define(`public_set')
define(`protected')
define(`extends')

typedef struct s_tthw *tthw;
typedef struct s_tthw {
    byte (*Sync)(void);
    byte (*Flush)(void);
    byte (*TimidFlush)(void);
    byte (*MainLoopOnce)(byte);
    void (*DeleteCallback)(ttcallback);

    void (*Close)(void);
    int (*ConnectionFd)(void);
    
    ttuint (*GetErrno)(void);
    ttuint (*GetErrnoDetail)(void);
    TT_CONST byte *(*StrError)(ttuint E);
    TT_CONST byte *(*StrErrorDetail)(ttuint E, ttuint S);

} s_tthw;

define(`el',`
    s_ttclass_$1	class_$1;')
typedef struct s_ttclasses *ttclasses;
typedef struct s_ttclasses {
TTlist()
    s_tthw HW;
} s_ttclasses;
undefine(`el')

define(`el',`
extern tt_obj TTClass_$1;')


/* client-visible global methods structures */
TTlist()

/* client-visible global types */
TTtypelist()
#define TTClass_ttsbyte	TTClass_ttbyte
#define TTClass_ttushort	TTClass_ttshort
#define TTClass_ttuint	TTClass_ttint

undefine(`el')

/* #defines for global methods structures */
#define TClasses	(TTD.Classes)

#define THW	(TTD.Class.HW)

define(`el',`
`#'define TClass_$1	(&TTD.Class.class_$1)')
TTlist()
undefine(`el')

#define TClass(type) TT_CAT(TClass_,type)


define(`el',`
`#'define TClass_default_$1	(&TTD.Class_default.class_$1)')
TTlist()
undefine(`el')
#define TClass_default(type) TT_CAT(TClass_default_,type)



divert(-1)

include(`m4/TTfield.m4')
include(`m4/TTdecay.m4')


define(`extends')
define(`public', `
c_arg_decl_decay($4,$5) TT$1_$2`'(ifelse($3, 0, void, `c_args_decl_decay(NSHIFT(6, $@))'));
')
define(`public_set',`public($@)')
define(`final',`public($@)')
define(`final_var',`
c_arg_decl_decay($4,$5) TT$1_$2`'(c_args_decl_decay(NSHIFT(6, $@)));
')



divert

/* prototypes for `public', `public_set', `final' and `final_var' methods */

define(`el',`
/* $1 methods */
`'TTdef_ttclass_$1($1)
')
TTlist()
undefine(`el')
define(`final')
define(`public_set')
define(`public')
define(`extends')

/* prototypes for TTGet*_* and TTSet*_* methods */

define(`getset_method', `
c_arg_decl_decay(_R_ifaddress($5,$6)`'$5,$6)	TT`'Toupper2($1,$2)_`'this`'(c_args_decl_decay(NSHIFT(7,$@)));')


define(`el', `

/* prototypes for TTGet*_$1 and TTSet*_$1 methods */dnl
define(`this', `$1')`'TTdef_$1($1)')
define(`extends')
define(`field', `getset_field($@)')
TTlist()
define(`extends')
define(`field')
undefine(`el')




#endif /* _TT_DECLSM4_H */

